<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram scale="100">
            <Box name="NAOClient" id="4" localization="8" tooltip="" x="1547" y="104">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="inputDisconnect" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Input name="inputSend" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
              <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
              <Output name="outputNative" type="3" type_size="1" nature="2" inner="0" tooltip="" id="8" />
              <Output name="onDisconnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
              <Output name="outputServerType" type="0" type_size="1" nature="2" inner="0" tooltip="" id="10" />
              <Output name="outputServerValue" type="0" type_size="1" nature="2" inner="0" tooltip="" id="11" />
              <Output name="ConnectionError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
              <Parameter name="host" inherits_from_parent="0" content_type="3" value="192.168.0.106" default_value="" custom_choice="0" tooltip="" id="13" />
              <Parameter name="serverPort" inherits_from_parent="0" content_type="1" value="12345" default_value="12345" min="1" max="65535" tooltip="" id="14" />
              <Parameter name="tryTimes" inherits_from_parent="0" content_type="1" value="10" default_value="10" min="1" max="100" tooltip="" id="15" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="84.0896">
                      <Box name="Connector" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="389" y="250">
                        <bitmap>media/images/box/sensors/inertial_unit.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time,socket,json,thread,select
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.IsConnected = False
        self.IsReading=False
        self.BreakRead= False
        self.EndReading = None
    def createConnection(self):
        try:
            self.s = socket.socket()
            self.host = self.getParameter("host")
            self.port = self.getParameter("serverPort")
            self.EndReading= self.getParameter("tryTimes")
            #self.s.send('read')
        except Exception as ex:
            self.logger.warning('error in create connection '+str(ex.message))
            self.output_connectionError()

    def connect(self):
        try:
            self.logger.info("connecting"+str(self.host))
            self.s= socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.s.connect((self.host, self.port))
            time.sleep(0.5)
            self.IsConnected=True
            self.BreakRead = False
            self.logger.info("Connected! ")
            self.onConnected()
        except Exception as ex:
            self.logger.warning("error in  connect "+str(ex))
            self.output_connectionError()


    def closeConnection(self):
        try:
            self.s.shutdown(2)
            self.s.close()                     # Close the socket when done
            self.IsConnected = False
            self.IsReading = False
            self.BreakRead = False
            self.onDisconnected()
            self.logger.info("Disconnected!")
        except Exception as ex:
            self.logger.warning('error in close Connection  '+str(ex))
            self.output_connectionError()


    def checkConnection(self):
        try:
            ready_to_read, ready_to_write, in_error = \
                select.select([self.s,], [self.s,], [], 5)
            return True
        except select.error:
            self.closeConnection()
            # connection error event here, maybe reconnect
            self.logger.warning('error in close Connection  '+str(select.error))
            return False


    def send(self,data):
        try:
            if self.checkConnection()==True:
                try:
                    self.s.send(data)
                    if self.IsReading!=True:
                        self.BreakRead = False
                        thread.start_new_thread(self.contReading, ())
                        self.IsReading=True
                except Exception as ex:
                    self.logger.warning('error in read '+str(ex))
                    self.output_connectionError()
        except Exception as ex:
            self.logger.warning('error in read Check Connection '+str(ex))
            self.output_connectionError()




    def onInput_send(self,data):
        try:
            if self.IsConnected!=True:
                self.connect()
            self.send(data)
        except Exception as ex:
            self.logger.warning('error in read '+str(ex))
            self.output_connectionError()

    def contReading(self):
        try:
            if self.IsConnected!= True:
                return

            for i in range (self.EndReading):
                if self.BreakRead!=True:
                    self.logger.warning('contReading '+str(i))
                    self.data =  self.recv_timeout()
                    if self.data ==False:
                        self.IsReading = False
                        self.BreakRead =True
                        self.output_connectionError()
                        return False

                    if self.data !=None and len(self.data)>0:
                        self.logger.info(str(self.data))
                        self.onOutputData(self.data)
                else:
                    self.logger.warning('breaking the Read')
                    self.IsReading = False
                    return
            self.IsReading = False


        except Exception as ex:
            self.logger.warning("error in Cont Reading "+str(ex))
            self.IsReading = False
            self.closeConnection()
            self.output_connectionError()
            return

    def recv_timeout(self,timeout=2):
        try:

            #make socket non blocking
            the_socket = self.s
            the_socket.setblocking(0)
            #total data partwise in an array
            total_data=[];
            data='';

            #beginning time
            begin=time.time()
            while 1:
                #if you got some data, then break after timeout
                if total_data and time.time()-begin > timeout:
                    break

                #if you got no data at all, wait a little longer, twice the timeout
                elif time.time()-begin > timeout*2:
                    break

                #recv something
                try:
                    data = the_socket.recv(8192)
                    if data:
                        total_data.append(data)
                        #change the beginning time for measurement
                        begin = time.time()
                    else:
                        #sleep for sometime to indicate a gap
                        time.sleep(0.1)
                except:

                    pass
            #join all parts to make final string
            self.logger.warning('data in recv_timeout '+str(total_data))
            return ''.join(total_data)
        except Exception as ex:
            self.logger.warning('error in recv_timeout '+str(ex))
            return False

    def onLoad(self):
        self.createConnection()
        #put initialization code here
    def onUnload(self):
        try:
            self.closeConnection()
        except Exception as ex:
            self.logger.warning('error in Unload'+str(ex))


    def onInput_onStart(self):
        try:
            self.BreakRead= False
            if self.IsConnected is not True:
                self.connect()
            else:
                if self.checkConnection() == True:
                    self.onConnected()
                else:
                    self.connect()
        except Exception as ex:
            self.logger.warning("error in Start: "+str(ex))
            self.output_connectionError()
        #self.onStopped() #activate the output of the box
    def onInput_onStop(self):
        try:
            self.closeConnection()
            #self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
            #self.onStopped() #activate the output of the box
        except Exception as ex:
            self.logger.warning('error in Stop'+str(ex.message))
            self.output_connectionError()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Input name="send" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                        <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                        <Output name="onOutputData" type="3" type_size="1" nature="2" inner="0" tooltip="OutputData" id="7" />
                        <Output name="onDisconnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                        <Output name="output_connectionError" type="1" type_size="1" nature="1" inner="0" tooltip="" id="9" />
                        <Parameter name="host" inherits_from_parent="1" content_type="3" value="192.168.52.128" default_value="192.168.1.103" custom_choice="0" tooltip="" id="10" />
                        <Parameter name="serverPort" inherits_from_parent="1" content_type="1" value="12345" default_value="12345" min="0" max="999999" tooltip="" id="11" />
                        <Parameter name="tryTimes" inherits_from_parent="1" content_type="1" value="10" default_value="5" min="1" max="100" tooltip="" id="12" />
                      </Box>
                      <Box name="DataAnalyzer" id="6" localization="8" tooltip="" x="889" y="286">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import  json
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.logger.info("DataAnalyzer Loaded.")




    def printData(self,Data):
        try:
            for key in data:
                value = data[key]
                self.logger.info("The key and value are ({}) = ({})".format(key, value))
        except Exception as ex:
            self.logger.warning('error in print Data '+str(ex))


    def analyzeData(self):
        try:
            if len(self.data)>10 and self.data[0]=='{':
                try:
                    data = json.loads(self.data)
                    arrData = data["Data"]
                    #self.printData(data)
                    try:
                        for key in arrData:
                            self.logger.info("type : "+str(key))
                            if key["name"]=='type':
                                self.logger.info('InnerType'+str(key['value']))
                                self.outputServerType(str(key['value']))
                            if key["name"]=='result':
                                self.outputServerValue(str(key['value']))
                                self.logger.info('InnerType'+str(key['value']))
                    except Exception as ex:
                        self.logger.warning('error in parse Data '+str(ex))
                except ValueError, e:
                    self.logger.warning('Error json: '+str(e))
                    self.data=None
                    return
                #data = self.data
                self.logger.info('All Data : '+str(data))
                dataArray = data["Data"]
                for item in dataArray:
                    self.logger.info(str(item))

            self.data = None
        except Exception as ex:
            self.logger.warning('error in analyze Data '+str(ex))
            self.output_connectionError()






    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        self.data = p

        self.analyzeData()
        self.outputNative(p)


        #self.onStopped() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="outputNative" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        <Output name="outputResult" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                        <Output name="outputServerType" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                        <Output name="outputServerValue" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                      </Box>
                      <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="7" />
                      <Link inputowner="0" indexofinput="8" outputowner="6" indexofoutput="5" />
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="4" outputowner="0" indexofoutput="5" />
                      <Link inputowner="0" indexofinput="9" outputowner="1" indexofoutput="8" />
                      <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="6" />
                      <Link inputowner="0" indexofinput="10" outputowner="6" indexofoutput="7" />
                      <Link inputowner="0" indexofinput="11" outputowner="6" indexofoutput="8" />
                      <Link inputowner="0" indexofinput="12" outputowner="1" indexofoutput="9" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="NAOServer" id="2" localization="8" tooltip="" x="336" y="658">
              <bitmap>media/images/box/interaction/target.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="inputDisconnect" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
              <Output name="onServerStarted" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
              <Output name="outputConnectionError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
              <Output name="outputConnectionClosed" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
              <Output name="outputThreadError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
              <Output name="onInput" type="0" type_size="1" nature="2" inner="0" tooltip="" id="10" />
              <Parameter name="port" inherits_from_parent="0" content_type="1" value="12345" default_value="12345" min="1" max="65535" tooltip="" id="11" />
              <Parameter name="host" inherits_from_parent="0" content_type="3" value="localhost" default_value="127.0.0.1" custom_choice="0" tooltip="" id="12" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="118.921">
                      <Box name="Server" id="1" localization="8" tooltip="" x="305" y="27">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import socket
import sys
import traceback
import time
from threading import Thread

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.socket = None
    def startServer(self):
        try:
            if self.socket ==  None:
                self.logger.info("self.socket is none ")
                self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.connectedClients = []
            self.host = self.getParameter("host")

            self.port = eval(str(self.getParameter("port"))) # arbitrary non-privileged port
            self.logger.info("socket Created!")
            try:
                self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)   # SO_REUSEADDR flag tells the kernel to reuse a local socket in TIME_WAIT state, without waiting for its natural timeout to expire
                time.sleep(0.5)
                self.logger.info("socket Settings Completed")
                try:
                    self.socket.bind((self.host, self.port))
                    self.logger.info("Socket Success on port : "+str(self.port))
                    self.onServerStarted(self.port)
                except:
                    try:
                        self.port = self.port+1
                        self.socket.bind((self.host, self.port))
                        self.logger.info("Socket Success on port : "+str(self.port))
                        self.onServerStarted(self.port)
                    except:
                        self.logger.info("Bind failed. Error : " + str(sys.exc_info()))
                        self.outputConnectionError()
                        return False

                #self.outputConnectionError()

            except:
                self.logger.info("Bind failed. Error : " + str(sys.exc_info()))
                #self.outputConnectionError()
                return False
            self.socket.listen(5)   # queue up to 5 requests
            self.logger.info("Socket now listening")
            connectionId=-1
            # infinite loop- do not reset for every requests
            if self.socket != None:
                while True:
                    connection, address = self.socket.accept()
                    ip, port = str(address[0]), str(address[1])
                    self.logger.info("Connected with " + ip + ":" + str(port))
                    connectionId = connectionId+1
                    self.connectedClients.append([connection,ip,port,connectionId])
                    try:
                        Thread(target=self.clientThread, args=(self.connectedClients[len(self.connectedClients)-1])).start()
                    except:
                        self.logger.info("Thread did not start.")
                self.socket.close()
        except Exception as ex:
            self.logger.warning('error in startServer  '+str(ex))
            self.outputConnectionError()
            return
    def clientThread(self,connection,ip,port,connectionId, max_buffer_size = 5120):
        is_active = True
        #self.logger.info("IP"+  str(connectionParams[1]))
        #self.logger.info("port"+str(connectionParams[2]))

        #connection = connectionParams[0]
        #ip = connectionParams[1]
        #port = connectionParams[2]
        self.logger.info("IP "+str(ip)+" Connection Id: "+str(connectionId))
        while is_active:
            try:
                client_input = self.receiveInput(connection, max_buffer_size)
                self.logger.info("I received : "+str(client_input)+" From : "+str(connectionId))
                try:
                    self.logger.info("IN TRY :::::")
                    self.logger.info("I will output : "+ str(client_input))
                    #self.onReceived("Input: "+str(client_input))
                    self.onReceived("Input Data")
                    self.logger.info("Data ReCEIVED OUTBOX ")
                except:
                    self.logger.info ("CANNOT OUTPUT DATA")

                if "--QUIT--" in client_input:
                    self.logger.info("Client is requesting to quit")
                    connection.close()
                    self.logger.info("Connection " + ip + ":" + str(port) + " closed")
                    try:
                        self.outputConnectionClosed()
                    except:
                        self.logger.info(" Cannot Activate: outputConnectionClosed Box  ")
                    is_active = False
                else:
                    self.logger.info("Processed result: {}".format(client_input))
                    connection.sendall("-".encode("utf8"))

            except Exception as ex:
                connection.close()
                self.logger.warning('error in receiveInput  '+str(ex.message))
                cConnection = self.getConnectionById(connectionId)
                self.connectedClients.remove(cConnection)
                self.outputThreadError()

                return

    def getConnectionById(self,id=0):
        try:
            for connection in self.connectedClients:
                self.logger.info(str(connection[3]))

                if connection[3]==id:
                    self.logger.info ("I found the Connection"+str(connection[3]))
                    return connection
            return False
        except Exception as ex:
            self.logger.warning('error in getConection By Id  '+str(ex.message))
            return False

    def receiveInput(self,connection, max_buffer_size):
        client_input = connection.recv(max_buffer_size)
        client_input_size = sys.getsizeof(client_input)
        if client_input_size > max_buffer_size:
            self.logger.info("The input size is greater than expected {}".format(client_input_size))

        decoded_input = client_input.decode("utf8").rstrip()  # decode and strip end of line
        result = self.processInput(decoded_input)
        return result
    def processInput(self,input_str):

        self.logger.info("Processing the input received from client")
        self.logger.info("Hello "+ str(input_str).upper())
        return input_str

    def shutDown(self):
        try:
            if self.socket != None:
                self.logger.info("Shutting Down")
                #self.socket.shutdown(1)
                self.socket.close()
                self.logger.info("shutdown Successfully")
                self.socket=None
                return True
        except Exception as ex:
            self.logger.warning('error in Shutdown '+str(ex.message))
            return False
    def onLoad(self):
        #put initialization code here
        return
    def onUnload(self):
        #put clean-up code here
        self.shutDown()
        return

    def onInput_onStart(self):
        self.startServer()
        return
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Input name="inputDisconnect" type="1" type_size="1" nature="3" inner="0" tooltip="" id="4" />
                        <Output name="onServerStarted" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                        <Output name="outputConnectionError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                        <Output name="outputConnectionClosed" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                        <Output name="outputThreadError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                        <Output name="onReceived" type="3" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" />
                        <Parameter name="port" inherits_from_parent="1" content_type="1" value="12341" default_value="12345" min="1" max="9999999" tooltip="" id="11" />
                        <Parameter name="host" inherits_from_parent="1" content_type="3" value="127.0.0.1" default_value="" custom_choice="0" tooltip="" id="12" />
                      </Box>
                      <Box name="Serverv_1" id="2" localization="8" tooltip="" x="1254" y="210">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import socket
import sys
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    def onLoad(self):
        #put initialization code here
        self.server_address = ('127.0.0.1', self.getParameter("port"))
        self.sock.bind(self.server_address)
        return
    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.sock.listen(1)
        self.logger.info("listeing")
        while True:
            # Wait for a connection
            self.logger.info(str(sys.stderr)+'waiting for a connection')
            self.connection, self.client_address = self.sock.accept()
            try:
                self.logger.info("connected!")
                self.logger.info(str(sys.stderr)+ 'connection from'+str( self.client_address))

                # Receive the data in small chunks and retransmit it
                while True:

                    data = self.connection.recv(16)
                    self.logger.info(str(sys.stderr)+'received '+str(data))
                    if data:
                        self.data = data
                        self.do()
                        self.logger.info(str(sys.stderr)+'sending data back to the client')
                        self.connection.sendall(data)
                    else:
                        self.logger.info(str(sys.stderr)+ 'no more data from'+str(self.client_address))
                        break
            finally:
                # Clean up the connection
                self.connection.close()
    def do(self):
        try:

            self.logger.info(str(self.data))
            self.data=None
        except Exception as ex:
            self.logger.warning('error in create connection '+str(ex.message))
            self.output_connectionError()
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="port" inherits_from_parent="1" content_type="1" value="12345" default_value="12345" min="1" max="9999999" tooltip="" id="5" />
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="1" indexofinput="4" outputowner="0" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="5" />
                      <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="6" />
                      <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="7" />
                      <Link inputowner="0" indexofinput="9" outputowner="1" indexofoutput="8" />
                      <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="10" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Set Language" id="1" localization="8" tooltip="Select the language you would like the robot to speak and understand. Any following call to&#x0A;ALSpeechRecognition (Speech Reco. box for instance) or ALTextToSpeech (Say box&#x0A;for instance) will use this language." x="253" y="307">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
              <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
              <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" />
              <Parameter name="Language" inherits_from_parent="0" content_type="3" value="English" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks and understands." id="5">
                <Choice value="Arabic" />
                <Choice value="Brazilian" />
                <Choice value="Chinese" />
                <Choice value="Czech" />
                <Choice value="Danish" />
                <Choice value="Dutch" />
                <Choice value="English" />
                <Choice value="Finnish" />
                <Choice value="French" />
                <Choice value="German" />
                <Choice value="Greek" />
                <Choice value="Italian" />
                <Choice value="Japanese" />
                <Choice value="Korean" />
                <Choice value="Norwegian" />
                <Choice value="Polish" />
                <Choice value="Portuguese" />
                <Choice value="Russian" />
                <Choice value="Spanish" />
                <Choice value="Swedish" />
                <Choice value="Turkish" />
              </Parameter>
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Say Text" id="5" localization="8" tooltip="Say the text received on its input." x="610" y="315">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="switcher" id="7" localization="8" tooltip="" x="701" y="67">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.paramClass = ""
        self.paramMethod = ""
        self.paramParameters=""
        self.currentRobot=1
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass
    def changeRobot(self):
        if self.currentRobot ==1:
            self.currentRobot = 4
        if self.currentRobot ==4:
            self.currentRobot =7
        if self.currentRobot ==7:
            self.currentRobot =1
        completeString= '{"op": "command","value": "setActive","requestId": 2,"params": "'+str(self.currentRobot)+'"}'
        self.onStopped(completeString)
    def getWord(self,p):
        #Change Robot
        if "change" in p.lower():
            self.changeRobot()
        #Lights
        if "on" in p.lower():
            #completeString = '{"op":"set","device":"robot","details":{"name": "Leds", "data": {"op": "c", "n": 1,"s":8}}}'
            completeString = '{"op": "command","value": "run","requestId": 4,"params": "connection---send---<c,2,8,0>"}'
            self.onStopped(completeString) #activate the output of the box
        if "off" in p.lower():
            #'completeString = '{"op":"set","device":"robot","details":{"name": "Leds", "data": {"op": "c", "n": 1,"s":9}}}'
            completeString = '{"op": "command","value": "run","requestId": 4,"params": "connection---send---<c,2,9,0>"}'
            self.onStopped(completeString) #activate the output of the box
        #Movement
        if "left"in p.lower():
            self.move("L")
            self.Left()
        if "right" in p.lower():
            self.move("R")
            self.Right()
        if "up" in p.lower():
            self.move("U")
            self.Up()
        if "down" in p.lower():
            self.move("D")
            self.Down()
        return
    def onInput_onStart(self, p):
        self.getWord(p)
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped return
            #{"op":"set","device":"robot","details":{"name": "Leds", "data": {"op": "c", "n": 1,"s":1}}}
    def move(self,parameters):

        self.outClass("Movement")
        self.outMethod("move")
        self.outParameters("L")]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="Up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
              <Output name="Down" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
              <Output name="Left" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
              <Output name="Right" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
              <Output name="outputClass" type="3" type_size="1" nature="2" inner="0" tooltip="" id="9" />
              <Output name="outputMethod" type="3" type_size="1" nature="2" inner="0" tooltip="" id="10" />
              <Output name="outputParameters" type="3" type_size="1" nature="2" inner="0" tooltip="" id="11" />
            </Box>
            <Box name="Sit Down" id="8" localization="8" tooltip="the robot tries to sit down from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="1211" y="313">
              <bitmap>media/images/box/movement/sit_ground.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in sitting down." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to sit down after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
              <Timeline enable="0">
                <BehaviorLayer name="SitDownBehavior">
                  <BehaviorKeyframe name="DetectRobotPose" index="1">
                    <Diagram>
                      <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="371" y="101">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Sit" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Box name="Stand Up" id="9" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="1214" y="487">
              <bitmap>media/images/box/movement/stand.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
              <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
              <Timeline enable="0">
                <BehaviorLayer name="StandUpBehavior">
                  <BehaviorKeyframe name="DetectRobotPose" index="1">
                    <Diagram>
                      <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Box name="Motor On/Off" id="13" localization="8" tooltip="Stiffen or loosen all motors." x="592" y="564">
              <bitmap>media/images/box/movement/stiffness.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")

    def onUnload(self):
        pass

    def onInput_onSet(self):
        if( self.getParameter("Action") == "On" ):
            stiffness = 1
        else:
            stiffness = 0
        self.motion.post.stiffnessInterpolation("Body", stiffness, 0.1)
        time.sleep(0.1)
        self.onReady() #~ activate output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="When this input is stimulated, all motors are stiffened or loosened." id="2" />
              <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when it is done." id="3" />
              <Parameter name="Action" inherits_from_parent="0" content_type="3" value="On" default_value="On" custom_choice="0" tooltip="Choose if you want to stiffen (On) or loosen (Off) all motors." id="4">
                <Choice value="Off" />
                <Choice value="On" />
              </Parameter>
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Box name="Text Edit" id="15" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="339" y="95">
              <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Change")]]>
                </content>
              </script>
              <pluginContent>
                <text>
                  <![CDATA[Change]]>
                </text>
              </pluginContent>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
              <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
            </Box>
            <Box name="Head" id="3" localization="8" tooltip="Enter description here" x="925" y="548">
              <bitmap>media/images/box/interaction/smile.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="Up_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
              <Input name="Down_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
              <Input name="Left_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
              <Input name="Right_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Right" id="10" localization="8" tooltip="" x="833" y="552">
                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="21">
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="21" value="5.79845" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="21" value="91.0534" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Up" id="11" localization="8" tooltip="" x="833" y="317">
                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="21">
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="21" value="-38.5" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="21" value="-2.99072" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Left" id="12" localization="8" tooltip="" x="829" y="676">
                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="21">
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="21" value="3.86484" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="21" value="-89.0367" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Down" id="14" localization="8" tooltip="" x="830" y="425">
                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="21">
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="21" value="22.1463" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="21" value="1.49175" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="3" />
                      <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="4" />
                      <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="RRMsg" id="10" localization="8" tooltip="Prepare the  RemoRobo Message to send to remorobo Controller" x="1026" y="272">
              <bitmap>media/images/box/interaction/uramark.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
    def onInput_onStart(self):
        try:
            self.logger.info('prepare Message Started !')
            #Additional Parameters
            self.robotClass =  self.getParameter("pRobotClass")
            self.method = self.getParameter("pMethod")
            self.parameters = self.getParameter("Parameters")
            self.prepareText()
        except Exception as ex:
            self.logger.warning('error in prepare Message_onStart '+str(ex.message))
        #self.onStopped() #activate the output of the box

        pass


    def prepareText(self):
        try:
            self.logger.info('preparing Message Started !')
            finalText = ""
            finalText+='{"op": "command","value": "run","requestId": 2,"params": "'
            #Movement
            finalText+= str(self.robotClass)
            #separator ---
            finalText+= "---"
            #move
            finalText+= str(self.method)
            #---
            finalText+= "---"
            finalText+= str(self.parameters)
            finalText+='---None"}'
            self.logger.info(str(finalText))
            self.logger.info('preparing Message Finished !')
            self.messageOutput(finalText) #activate the output of the box
        except Exception as ex:
            self.logger.warning('error in prepare Message_Creating Text '+str(ex.message))
        #self.onStopped() #activate the output of the box





    def onUnload(self):
        #put clean-up code here
        pass



    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.messageOutput() #activate the output of the box


#region Input Paramethers
    #get Parameters as Input (three Methods)
    def onInput_inClass(self, p):
        self.setParameter("pRobotClass",str(p))
        pass
    def onInput_inMethod(self, p):
        self.setParameter("pMethod",str(p))
        pass



    def onInput_inParameters(self, p):
        self.setParameter("Parameters",str(p))
        pass
#endregion]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="inClass" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Input name="inMethod" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
              <Input name="inParameters" type="3" type_size="1" nature="1" inner="0" tooltip="" id="6" />
              <Output name="messageOutput" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
              <Parameter name="pRobotClass" inherits_from_parent="0" content_type="3" value="Movement" default_value="Movement" custom_choice="1" tooltip="" id="8" />
              <Parameter name="pMethod" inherits_from_parent="0" content_type="3" value="move" default_value="move" custom_choice="0" tooltip="" id="9" />
              <Parameter name="Parameters" inherits_from_parent="0" content_type="3" value="R---0" default_value="R---0" custom_choice="1" tooltip="" id="10" />
            </Box>
            <Box name="Remo" id="6" localization="8" tooltip="" x="1826" y="422">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="NAOClient" id="4" localization="8" tooltip="" x="1876" y="172">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Input name="inputDisconnect" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                        <Input name="inputSend" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                        <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                        <Output name="outputNative" type="3" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                        <Output name="onDisconnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                        <Output name="outputServerType" type="0" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                        <Output name="outputServerValue" type="0" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                        <Output name="ConnectionError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                        <Parameter name="host" inherits_from_parent="0" content_type="3" value="192.168.0.106" default_value="" custom_choice="0" tooltip="" id="13" />
                        <Parameter name="serverPort" inherits_from_parent="0" content_type="1" value="12345" default_value="12345" min="1" max="65535" tooltip="" id="14" />
                        <Parameter name="tryTimes" inherits_from_parent="0" content_type="1" value="10" default_value="10" min="1" max="100" tooltip="" id="15" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="84.0896">
                                <Box name="Connector" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="389" y="250">
                                  <bitmap>media/images/box/sensors/inertial_unit.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time,socket,json,thread,select
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.IsConnected = False
        self.IsReading=False
        self.BreakRead= False
        self.EndReading = None
    def createConnection(self):
        try:
            self.s = socket.socket()
            self.host = self.getParameter("host")
            self.port = self.getParameter("serverPort")
            self.EndReading= self.getParameter("tryTimes")
            #self.s.send('read')
        except Exception as ex:
            self.logger.warning('error in create connection '+str(ex.message))
            self.output_connectionError()

    def connect(self):
        try:
            self.logger.info("connecting"+str(self.host))
            self.s= socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.s.connect((self.host, self.port))
            time.sleep(0.5)
            self.IsConnected=True
            self.BreakRead = False
            self.logger.info("Connected! ")
            self.onConnected()
        except Exception as ex:
            self.logger.warning("error in  connect "+str(ex))
            self.output_connectionError()


    def closeConnection(self):
        try:
            self.s.shutdown(2)
            self.s.close()                     # Close the socket when done
            self.IsConnected = False
            self.IsReading = False
            self.BreakRead = False
            self.onDisconnected()
            self.logger.info("Disconnected!")
        except Exception as ex:
            self.logger.warning('error in close Connection  '+str(ex))
            self.output_connectionError()


    def checkConnection(self):
        try:
            ready_to_read, ready_to_write, in_error = \
                select.select([self.s,], [self.s,], [], 5)
            return True
        except select.error:
            self.closeConnection()
            # connection error event here, maybe reconnect
            self.logger.warning('error in close Connection  '+str(select.error))
            return False


    def send(self,data):
        try:
            if self.checkConnection()==True:
                try:
                    self.s.send(data)
                    if self.IsReading!=True:
                        self.BreakRead = False
                        thread.start_new_thread(self.contReading, ())
                        self.IsReading=True
                except Exception as ex:
                    self.logger.warning('error in read '+str(ex))
                    self.output_connectionError()
        except Exception as ex:
            self.logger.warning('error in read Check Connection '+str(ex))
            self.output_connectionError()




    def onInput_send(self,data):
        try:
            if self.IsConnected!=True:
                self.connect()
            self.send(data)
        except Exception as ex:
            self.logger.warning('error in read '+str(ex))
            self.output_connectionError()

    def contReading(self):
        try:
            if self.IsConnected!= True:
                return

            for i in range (self.EndReading):
                if self.BreakRead!=True:
                    self.logger.warning('contReading '+str(i))
                    self.data =  self.recv_timeout()
                    if self.data ==False:
                        self.IsReading = False
                        self.BreakRead =True
                        self.output_connectionError()
                        return False

                    if self.data !=None and len(self.data)>0:
                        self.logger.info(str(self.data))
                        self.onOutputData(self.data)
                else:
                    self.logger.warning('breaking the Read')
                    self.IsReading = False
                    return
            self.IsReading = False


        except Exception as ex:
            self.logger.warning("error in Cont Reading "+str(ex))
            self.IsReading = False
            self.closeConnection()
            self.output_connectionError()
            return

    def recv_timeout(self,timeout=2):
        try:

            #make socket non blocking
            the_socket = self.s
            the_socket.setblocking(0)
            #total data partwise in an array
            total_data=[];
            data='';

            #beginning time
            begin=time.time()
            while 1:
                #if you got some data, then break after timeout
                if total_data and time.time()-begin > timeout:
                    break

                #if you got no data at all, wait a little longer, twice the timeout
                elif time.time()-begin > timeout*2:
                    break

                #recv something
                try:
                    data = the_socket.recv(8192)
                    if data:
                        total_data.append(data)
                        #change the beginning time for measurement
                        begin = time.time()
                    else:
                        #sleep for sometime to indicate a gap
                        time.sleep(0.1)
                except:

                    pass
            #join all parts to make final string
            self.logger.warning('data in recv_timeout '+str(total_data))
            return ''.join(total_data)
        except Exception as ex:
            self.logger.warning('error in recv_timeout '+str(ex))
            return False

    def onLoad(self):
        self.createConnection()
        #put initialization code here
    def onUnload(self):
        try:
            self.closeConnection()
        except Exception as ex:
            self.logger.warning('error in Unload'+str(ex))


    def onInput_onStart(self):
        try:
            self.BreakRead= False
            if self.IsConnected is not True:
                self.connect()
            else:
                if self.checkConnection() == True:
                    self.onConnected()
                else:
                    self.connect()
        except Exception as ex:
            self.logger.warning("error in Start: "+str(ex))
            self.output_connectionError()
        #self.onStopped() #activate the output of the box
    def onInput_onStop(self):
        try:
            self.closeConnection()
            #self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
            #self.onStopped() #activate the output of the box
        except Exception as ex:
            self.logger.warning('error in Stop'+str(ex.message))
            self.output_connectionError()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="send" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                  <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                  <Output name="onOutputData" type="3" type_size="1" nature="2" inner="0" tooltip="OutputData" id="7" />
                                  <Output name="onDisconnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                  <Output name="output_connectionError" type="1" type_size="1" nature="1" inner="0" tooltip="" id="9" />
                                  <Parameter name="host" inherits_from_parent="1" content_type="3" value="192.168.52.128" default_value="192.168.1.103" custom_choice="0" tooltip="" id="10" />
                                  <Parameter name="serverPort" inherits_from_parent="1" content_type="1" value="12345" default_value="12345" min="0" max="999999" tooltip="" id="11" />
                                  <Parameter name="tryTimes" inherits_from_parent="1" content_type="1" value="10" default_value="5" min="1" max="100" tooltip="" id="12" />
                                </Box>
                                <Box name="DataAnalyzer" id="6" localization="8" tooltip="" x="889" y="286">
                                  <bitmap>media/images/box/box-script.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import  json
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.logger.info("DataAnalyzer Loaded.")




    def printData(self,Data):
        try:
            for key in data:
                value = data[key]
                self.logger.info("The key and value are ({}) = ({})".format(key, value))
        except Exception as ex:
            self.logger.warning('error in print Data '+str(ex))


    def analyzeData(self):
        try:
            if len(self.data)>10 and self.data[0]=='{':
                try:
                    data = json.loads(self.data)
                    arrData = data["Data"]
                    #self.printData(data)
                    try:
                        for key in arrData:
                            self.logger.info("type : "+str(key))
                            if key["name"]=='type':
                                self.logger.info('InnerType'+str(key['value']))
                                self.outputServerType(str(key['value']))
                            if key["name"]=='result':
                                self.outputServerValue(str(key['value']))
                                self.logger.info('InnerType'+str(key['value']))
                    except Exception as ex:
                        self.logger.warning('error in parse Data '+str(ex))
                except ValueError, e:
                    self.logger.warning('Error json: '+str(e))
                    self.data=None
                    return
                #data = self.data
                self.logger.info('All Data : '+str(data))
                dataArray = data["Data"]
                for item in dataArray:
                    self.logger.info(str(item))

            self.data = None
        except Exception as ex:
            self.logger.warning('error in analyze Data '+str(ex))
            self.output_connectionError()






    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        self.data = p

        self.analyzeData()
        self.outputNative(p)


        #self.onStopped() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Output name="outputNative" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                  <Output name="outputResult" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                  <Output name="outputServerType" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                  <Output name="outputServerValue" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                </Box>
                                <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="7" />
                                <Link inputowner="0" indexofinput="8" outputowner="6" indexofoutput="5" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="4" outputowner="0" indexofoutput="5" />
                                <Link inputowner="0" indexofinput="9" outputowner="1" indexofoutput="8" />
                                <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="6" />
                                <Link inputowner="0" indexofinput="10" outputowner="6" indexofoutput="7" />
                                <Link inputowner="0" indexofinput="11" outputowner="6" indexofoutput="8" />
                                <Link inputowner="0" indexofinput="12" outputowner="1" indexofoutput="9" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="NAOServer" id="2" localization="8" tooltip="" x="665" y="726">
                        <bitmap>media/images/box/interaction/target.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Input name="inputDisconnect" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                        <Output name="onServerStarted" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                        <Output name="outputConnectionError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                        <Output name="outputConnectionClosed" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                        <Output name="outputThreadError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                        <Output name="onInput" type="0" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                        <Parameter name="port" inherits_from_parent="0" content_type="1" value="12345" default_value="12345" min="1" max="65535" tooltip="" id="11" />
                        <Parameter name="host" inherits_from_parent="0" content_type="3" value="localhost" default_value="127.0.0.1" custom_choice="0" tooltip="" id="12" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="118.921">
                                <Box name="Server" id="1" localization="8" tooltip="" x="305" y="27">
                                  <bitmap>media/images/box/box-python-script.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import socket
import sys
import traceback
import time
from threading import Thread

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.socket = None
    def startServer(self):
        try:
            if self.socket ==  None:
                self.logger.info("self.socket is none ")
                self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.connectedClients = []
            self.host = self.getParameter("host")

            self.port = eval(str(self.getParameter("port"))) # arbitrary non-privileged port
            self.logger.info("socket Created!")
            try:
                self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)   # SO_REUSEADDR flag tells the kernel to reuse a local socket in TIME_WAIT state, without waiting for its natural timeout to expire
                time.sleep(0.5)
                self.logger.info("socket Settings Completed")
                try:
                    self.socket.bind((self.host, self.port))
                    self.logger.info("Socket Success on port : "+str(self.port))
                    self.onServerStarted(self.port)
                except:
                    try:
                        self.port = self.port+1
                        self.socket.bind((self.host, self.port))
                        self.logger.info("Socket Success on port : "+str(self.port))
                        self.onServerStarted(self.port)
                    except:
                        self.logger.info("Bind failed. Error : " + str(sys.exc_info()))
                        self.outputConnectionError()
                        return False

                #self.outputConnectionError()

            except:
                self.logger.info("Bind failed. Error : " + str(sys.exc_info()))
                #self.outputConnectionError()
                return False
            self.socket.listen(5)   # queue up to 5 requests
            self.logger.info("Socket now listening")
            connectionId=-1
            # infinite loop- do not reset for every requests
            if self.socket != None:
                while True:
                    connection, address = self.socket.accept()
                    ip, port = str(address[0]), str(address[1])
                    self.logger.info("Connected with " + ip + ":" + str(port))
                    connectionId = connectionId+1
                    self.connectedClients.append([connection,ip,port,connectionId])
                    try:
                        Thread(target=self.clientThread, args=(self.connectedClients[len(self.connectedClients)-1])).start()
                    except:
                        self.logger.info("Thread did not start.")
                self.socket.close()
        except Exception as ex:
            self.logger.warning('error in startServer  '+str(ex))
            self.outputConnectionError()
            return
    def clientThread(self,connection,ip,port,connectionId, max_buffer_size = 5120):
        is_active = True
        #self.logger.info("IP"+  str(connectionParams[1]))
        #self.logger.info("port"+str(connectionParams[2]))

        #connection = connectionParams[0]
        #ip = connectionParams[1]
        #port = connectionParams[2]
        self.logger.info("IP "+str(ip)+" Connection Id: "+str(connectionId))
        while is_active:
            try:
                client_input = self.receiveInput(connection, max_buffer_size)
                self.logger.info("I received : "+str(client_input)+" From : "+str(connectionId))
                try:
                    self.logger.info("IN TRY :::::")
                    self.logger.info("I will output : "+ str(client_input))
                    #self.onReceived("Input: "+str(client_input))
                    self.onReceived("Input Data")
                    self.logger.info("Data ReCEIVED OUTBOX ")
                except:
                    self.logger.info ("CANNOT OUTPUT DATA")

                if "--QUIT--" in client_input:
                    self.logger.info("Client is requesting to quit")
                    connection.close()
                    self.logger.info("Connection " + ip + ":" + str(port) + " closed")
                    try:
                        self.outputConnectionClosed()
                    except:
                        self.logger.info(" Cannot Activate: outputConnectionClosed Box  ")
                    is_active = False
                else:
                    self.logger.info("Processed result: {}".format(client_input))
                    connection.sendall("-".encode("utf8"))

            except Exception as ex:
                connection.close()
                self.logger.warning('error in receiveInput  '+str(ex.message))
                cConnection = self.getConnectionById(connectionId)
                self.connectedClients.remove(cConnection)
                self.outputThreadError()

                return

    def getConnectionById(self,id=0):
        try:
            for connection in self.connectedClients:
                self.logger.info(str(connection[3]))

                if connection[3]==id:
                    self.logger.info ("I found the Connection"+str(connection[3]))
                    return connection
            return False
        except Exception as ex:
            self.logger.warning('error in getConection By Id  '+str(ex.message))
            return False

    def receiveInput(self,connection, max_buffer_size):
        client_input = connection.recv(max_buffer_size)
        client_input_size = sys.getsizeof(client_input)
        if client_input_size > max_buffer_size:
            self.logger.info("The input size is greater than expected {}".format(client_input_size))

        decoded_input = client_input.decode("utf8").rstrip()  # decode and strip end of line
        result = self.processInput(decoded_input)
        return result
    def processInput(self,input_str):

        self.logger.info("Processing the input received from client")
        self.logger.info("Hello "+ str(input_str).upper())
        return input_str

    def shutDown(self):
        try:
            if self.socket != None:
                self.logger.info("Shutting Down")
                #self.socket.shutdown(1)
                self.socket.close()
                self.logger.info("shutdown Successfully")
                self.socket=None
                return True
        except Exception as ex:
            self.logger.warning('error in Shutdown '+str(ex.message))
            return False
    def onLoad(self):
        #put initialization code here
        return
    def onUnload(self):
        #put clean-up code here
        self.shutDown()
        return

    def onInput_onStart(self):
        self.startServer()
        return
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="inputDisconnect" type="1" type_size="1" nature="3" inner="0" tooltip="" id="4" />
                                  <Output name="onServerStarted" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                  <Output name="outputConnectionError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                  <Output name="outputConnectionClosed" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                  <Output name="outputThreadError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                  <Output name="onReceived" type="3" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" />
                                  <Parameter name="port" inherits_from_parent="1" content_type="1" value="12341" default_value="12345" min="1" max="9999999" tooltip="" id="11" />
                                  <Parameter name="host" inherits_from_parent="1" content_type="3" value="127.0.0.1" default_value="" custom_choice="0" tooltip="" id="12" />
                                </Box>
                                <Box name="Serverv_1" id="2" localization="8" tooltip="" x="1254" y="210">
                                  <bitmap>media/images/box/box-python-script.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import socket
import sys
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    def onLoad(self):
        #put initialization code here
        self.server_address = ('127.0.0.1', self.getParameter("port"))
        self.sock.bind(self.server_address)
        return
    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.sock.listen(1)
        self.logger.info("listeing")
        while True:
            # Wait for a connection
            self.logger.info(str(sys.stderr)+'waiting for a connection')
            self.connection, self.client_address = self.sock.accept()
            try:
                self.logger.info("connected!")
                self.logger.info(str(sys.stderr)+ 'connection from'+str( self.client_address))

                # Receive the data in small chunks and retransmit it
                while True:

                    data = self.connection.recv(16)
                    self.logger.info(str(sys.stderr)+'received '+str(data))
                    if data:
                        self.data = data
                        self.do()
                        self.logger.info(str(sys.stderr)+'sending data back to the client')
                        self.connection.sendall(data)
                    else:
                        self.logger.info(str(sys.stderr)+ 'no more data from'+str(self.client_address))
                        break
            finally:
                # Clean up the connection
                self.connection.close()
    def do(self):
        try:

            self.logger.info(str(self.data))
            self.data=None
        except Exception as ex:
            self.logger.warning('error in create connection '+str(ex.message))
            self.output_connectionError()
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Parameter name="port" inherits_from_parent="1" content_type="1" value="12345" default_value="12345" min="1" max="9999999" tooltip="" id="5" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="4" outputowner="0" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="5" />
                                <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="6" />
                                <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="7" />
                                <Link inputowner="0" indexofinput="9" outputowner="1" indexofoutput="8" />
                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="10" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Set Language" id="1" localization="8" tooltip="Select the language you would like the robot to speak and understand. Any following call to&#x0A;ALSpeechRecognition (Speech Reco. box for instance) or ALTextToSpeech (Say box&#x0A;for instance) will use this language." x="582" y="375">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                        <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                        <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" />
                        <Parameter name="Language" inherits_from_parent="0" content_type="3" value="English" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks and understands." id="5">
                          <Choice value="Arabic" />
                          <Choice value="Brazilian" />
                          <Choice value="Chinese" />
                          <Choice value="Czech" />
                          <Choice value="Danish" />
                          <Choice value="Dutch" />
                          <Choice value="English" />
                          <Choice value="Finnish" />
                          <Choice value="French" />
                          <Choice value="German" />
                          <Choice value="Greek" />
                          <Choice value="Italian" />
                          <Choice value="Japanese" />
                          <Choice value="Korean" />
                          <Choice value="Norwegian" />
                          <Choice value="Polish" />
                          <Choice value="Portuguese" />
                          <Choice value="Russian" />
                          <Choice value="Spanish" />
                          <Choice value="Swedish" />
                          <Choice value="Turkish" />
                        </Parameter>
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Say Text" id="5" localization="8" tooltip="Say the text received on its input." x="939" y="383">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="switcher" id="7" localization="8" tooltip="" x="1030" y="135">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.paramClass = ""
        self.paramMethod = ""
        self.paramParameters=""
        self.currentRobot=1
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass
    def changeRobot(self):
        if self.currentRobot ==1:
            self.currentRobot = 4
        if self.currentRobot ==4:
            self.currentRobot =7
        if self.currentRobot ==7:
            self.currentRobot =1
        completeString= '{"op": "command","value": "setActive","requestId": 2,"params": "'+str(self.currentRobot)+'"}'
        self.onStopped(completeString)
    def getWord(self,p):
        #Change Robot
        if "change" in p.lower():
            self.changeRobot()
        #Lights
        if "on" in p.lower():
            #completeString = '{"op":"set","device":"robot","details":{"name": "Leds", "data": {"op": "c", "n": 1,"s":8}}}'
            completeString = '{"op": "command","value": "run","requestId": 4,"params": "connection---send---<c,2,8,0>"}'
            self.onStopped(completeString) #activate the output of the box
        if "off" in p.lower():
            #'completeString = '{"op":"set","device":"robot","details":{"name": "Leds", "data": {"op": "c", "n": 1,"s":9}}}'
            completeString = '{"op": "command","value": "run","requestId": 4,"params": "connection---send---<c,2,9,0>"}'
            self.onStopped(completeString) #activate the output of the box
        #Movement
        if "left"in p.lower():
            self.move("L")
            self.Left()
        if "right" in p.lower():
            self.move("R")
            self.Right()
        if "up" in p.lower():
            self.move("U")
            self.Up()
        if "down" in p.lower():
            self.move("D")
            self.Down()
        return
    def onInput_onStart(self, p):
        self.getWord(p)
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped return
            #{"op":"set","device":"robot","details":{"name": "Leds", "data": {"op": "c", "n": 1,"s":1}}}
    def move(self,parameters):

        self.outClass("Movement")
        self.outMethod("move")
        self.outParameters("L")]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="Up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        <Output name="Down" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                        <Output name="Left" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                        <Output name="Right" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                        <Output name="outputClass" type="3" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                        <Output name="outputMethod" type="3" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                        <Output name="outputParameters" type="3" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                      </Box>
                      <Box name="Sit Down" id="8" localization="8" tooltip="the robot tries to sit down from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="1540" y="381">
                        <bitmap>media/images/box/movement/sit_ground.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in sitting down." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to sit down after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                        <Timeline enable="0">
                          <BehaviorLayer name="SitDownBehavior">
                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                              <Diagram>
                                <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="371" y="101">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Sit" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Stand Up" id="9" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="1543" y="555">
                        <bitmap>media/images/box/movement/stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="StandUpBehavior">
                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                              <Diagram>
                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Motor On/Off" id="13" localization="8" tooltip="Stiffen or loosen all motors." x="921" y="632">
                        <bitmap>media/images/box/movement/stiffness.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")

    def onUnload(self):
        pass

    def onInput_onSet(self):
        if( self.getParameter("Action") == "On" ):
            stiffness = 1
        else:
            stiffness = 0
        self.motion.post.stiffnessInterpolation("Body", stiffness, 0.1)
        time.sleep(0.1)
        self.onReady() #~ activate output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="When this input is stimulated, all motors are stiffened or loosened." id="2" />
                        <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when it is done." id="3" />
                        <Parameter name="Action" inherits_from_parent="0" content_type="3" value="On" default_value="On" custom_choice="0" tooltip="Choose if you want to stiffen (On) or loosen (Off) all motors." id="4">
                          <Choice value="Off" />
                          <Choice value="On" />
                        </Parameter>
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit" id="15" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="668" y="163">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Change")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Change]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Head" id="3" localization="8" tooltip="Enter description here" x="1254" y="616">
                        <bitmap>media/images/box/interaction/smile.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="Up_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                        <Input name="Down_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                        <Input name="Left_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                        <Input name="Right_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Right" id="10" localization="8" tooltip="" x="833" y="552">
                                  <bitmap>media/images/box/box-timeLine.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="21">
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="21" value="5.79845" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="21" value="91.0534" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Up" id="11" localization="8" tooltip="" x="833" y="317">
                                  <bitmap>media/images/box/box-timeLine.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="21">
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="21" value="-38.5" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="21" value="-2.99072" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Left" id="12" localization="8" tooltip="" x="829" y="676">
                                  <bitmap>media/images/box/box-timeLine.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="21">
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="21" value="3.86484" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="21" value="-89.0367" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Down" id="14" localization="8" tooltip="" x="830" y="425">
                                  <bitmap>media/images/box/box-timeLine.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="21">
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="21" value="22.1463" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="21" value="1.49175" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="3" />
                                <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="4" />
                                <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="RRMsg" id="10" localization="8" tooltip="Prepare the  RemoRobo Message to send to remorobo Controller" x="1355" y="340">
                        <bitmap>media/images/box/interaction/uramark.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
    def onInput_onStart(self):
        try:
            self.logger.info('prepare Message Started !')
            #Additional Parameters
            self.robotClass =  self.getParameter("pRobotClass")
            self.method = self.getParameter("pMethod")
            self.parameters = self.getParameter("Parameters")
            self.prepareText()
        except Exception as ex:
            self.logger.warning('error in prepare Message_onStart '+str(ex.message))
        #self.onStopped() #activate the output of the box

        pass


    def prepareText(self):
        try:
            self.logger.info('preparing Message Started !')
            finalText = ""
            finalText+='{"op": "command","value": "run","requestId": 2,"params": "'
            #Movement
            finalText+= str(self.robotClass)
            #separator ---
            finalText+= "---"
            #move
            finalText+= str(self.method)
            #---
            finalText+= "---"
            finalText+= str(self.parameters)
            finalText+='---None"}'
            self.logger.info(str(finalText))
            self.logger.info('preparing Message Finished !')
            self.messageOutput(finalText) #activate the output of the box
        except Exception as ex:
            self.logger.warning('error in prepare Message_Creating Text '+str(ex.message))
        #self.onStopped() #activate the output of the box





    def onUnload(self):
        #put clean-up code here
        pass



    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.messageOutput() #activate the output of the box


#region Input Paramethers
    #get Parameters as Input (three Methods)
    def onInput_inClass(self, p):
        self.setParameter("pRobotClass",str(p))
        pass
    def onInput_inMethod(self, p):
        self.setParameter("pMethod",str(p))
        pass



    def onInput_inParameters(self, p):
        self.setParameter("Parameters",str(p))
        pass
#endregion]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Input name="inClass" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                        <Input name="inMethod" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                        <Input name="inParameters" type="3" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                        <Output name="messageOutput" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                        <Parameter name="pRobotClass" inherits_from_parent="0" content_type="3" value="Movement" default_value="Movement" custom_choice="1" tooltip="" id="8" />
                        <Parameter name="pMethod" inherits_from_parent="0" content_type="3" value="move" default_value="move" custom_choice="0" tooltip="" id="9" />
                        <Parameter name="Parameters" inherits_from_parent="0" content_type="3" value="R---0" default_value="R---0" custom_choice="1" tooltip="" id="10" />
                      </Box>
                      <Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="5" />
                      <Link inputowner="3" indexofinput="3" outputowner="7" indexofoutput="6" />
                      <Link inputowner="3" indexofinput="4" outputowner="7" indexofoutput="7" />
                      <Link inputowner="3" indexofinput="5" outputowner="7" indexofoutput="8" />
                      <Link inputowner="7" indexofinput="2" outputowner="15" indexofoutput="3" />
                      <Link inputowner="5" indexofinput="2" outputowner="15" indexofoutput="3" />
                      <Link inputowner="4" indexofinput="5" outputowner="10" indexofoutput="7" />
                      <Link inputowner="10" indexofinput="4" outputowner="7" indexofoutput="9" />
                      <Link inputowner="10" indexofinput="5" outputowner="7" indexofoutput="10" />
                      <Link inputowner="10" indexofinput="6" outputowner="7" indexofoutput="11" />
                      <Link inputowner="4" indexofinput="5" outputowner="7" indexofoutput="4" />
                      <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="5" />
            <Link inputowner="3" indexofinput="3" outputowner="7" indexofoutput="6" />
            <Link inputowner="3" indexofinput="4" outputowner="7" indexofoutput="7" />
            <Link inputowner="3" indexofinput="5" outputowner="7" indexofoutput="8" />
            <Link inputowner="7" indexofinput="2" outputowner="15" indexofoutput="3" />
            <Link inputowner="5" indexofinput="2" outputowner="15" indexofoutput="3" />
            <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="4" indexofinput="5" outputowner="10" indexofoutput="7" />
            <Link inputowner="10" indexofinput="4" outputowner="7" indexofoutput="9" />
            <Link inputowner="10" indexofinput="5" outputowner="7" indexofoutput="10" />
            <Link inputowner="10" indexofinput="6" outputowner="7" indexofoutput="11" />
            <Link inputowner="4" indexofinput="5" outputowner="7" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
